/*
Copyright Â© 2025 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"time"

	"github.com/spf13/cobra"
)

var (
	clientCmdGrpcHost       string
	clientCmdGrpcPort       string
	clientRetryPolicyConfig string
	CBFailureThreshold      int
	CBHalfOpenMaxRequests   int
	CBRequestTimeout        time.Duration
	CBOpenRecoveryTime      time.Duration
)

// clientCmd represents the client command
var clientCmd = &cobra.Command{
	Use:   "client",
	Short: "gRPC client command for the current gRPC server",
	Long: `This cli will be used to get connected to the gRPC server. 
	Ivoking the gRPC services returning the response in json format`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.Help()
	},
}

func init() {
	rootCmd.AddCommand(clientCmd)
	clientCmd.PersistentFlags().StringVar(&clientCmdGrpcHost, "grpc-host", "localhost", "grpc server address")
	clientCmd.PersistentFlags().StringVar(&clientCmdGrpcPort, "grpc-port", "9090", "grpc server port")
	clientCmd.PersistentFlags().StringVar(&clientRetryPolicyConfig, "grpc-retry-policy", "/etc/grpc_client/retry_policy.conf", "grpc client retry policy configuration file path")
	clientCmd.PersistentFlags().IntVar(&CBFailureThreshold, "cb-failure-threshold", 10, "circuit breaker request failure threshold to change the state to open")
	clientCmd.PersistentFlags().IntVar(&CBHalfOpenMaxRequests, "cb-halfopen-max-request", 5, "circuit breaker successful request threshold to change the half-open state to closed")
	clientCmd.PersistentFlags().DurationVar(&CBRequestTimeout, "cb-request-timeouts", time.Second*10, "timeouts for requests generated by client and haven't get any response")
	clientCmd.PersistentFlags().DurationVar(&CBOpenRecoveryTime, "cb-recovery-time", time.Second*5, "duration to block the requests before moving from open state to half-open state")
}
